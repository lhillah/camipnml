~~
~~  Copyright 2009 Sorbonne Universités, Université Pierre & Marie Curie - CNRS UMR 7606 (LIP6/MoVe)
~~  All rights reserved.   This program and the accompanying materials
~~  are made available under the terms of the Eclipse Public License v1.0
~~  which accompanies this distribution, and is available at
~~  http://www.eclipse.org/legal/epl-v10.html
~~
~~  Initial contributor:
~~    Lom Messan Hillah - <lom-messan.hillah@lip6.fr>
~~
~~  Mailing list:
~~    lom-messan.hillah@lip6.fr
~~

 -------
Usage
 -------
 -------
2014-01
 -------

Invocation

  The general invocation command is: <java -jar jar_name conversion_Kind [options] inputFile1 [inputFile2 ...] [outputFile]>.
Run the application with <-h> or <--help> to get help.

* Required arguments

  At least two arguments are expected:
  
  * You must specify at least one type of conversion to be performed, either <-c2p> (Cami to PNML)
or <-p2c> (PNML to Cami).
  
  * You must also specify the path of an input file.
  
* Examples

  Here are examples of invocation:  
  
  * <java -jar jar_name -p2c philo.pnml -o philo.cami>, converts <philo.pnml> into explicitly named <philo.cami>.
  
  * <java -jar jar_name -c2p Piscine.cami>, converts <Piscine.cami> into implicitly named <Piscine.pnml>.

* Increase VM heap space to handle large documents

 If you want to handle large documents (up to a few hundreds MB), you should increase the available
memory space for the heap. A simple way to do this is to pass the <-Xmx> argument to java:

	* <java -Xmx7g jar_name -p2c philo.pnml -o philo.cami>, allocate 7 GB max memory to the heap.

 If you want to use advanced arguments for the VM, you may try the following:
 
 	* <java -d64 -server -Xmx7g -Xmn128m -XX:NewSize=2g -XX:MaxNewSize=2g -XX:+UseNUMA -XX:+UseConcMarkSweepGC -XX:+UseParNewGC>
 		
 		and then continue the command line as above: <jar_name -p2c philo.pnml -o philo.cami>

 Finally, instead of the set of advanced arguments above, you may just try the following single one: -XX:+AggressiveHeap

* Service result

  The result is a destination file (Cami or PNML), the path of which you may have provided at the invocation.
If not, we deduce the destination file path from the input file one.

  Output messages are sent on stderr.


Import Petri net models from PNML in Macao or Coloane

  To open PNML Petri Net models in Macao or Coloane, you should transform them first into Cami using this application.

